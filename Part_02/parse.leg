# The leg parser for the alic language.
# (c) 2025 Warren Toomey, GPL3

%{
#include <stdio.h>
#include <stdlib.h>
#include "alic.h"
#include "proto.h"

#define YYSTYPE ASTnode *

extern uint Line;
extern Type *ty_void;
extern Type *ty_bool;
extern Type *ty_int8;
extern Type *ty_int16;
extern Type *ty_int32;
extern Type *ty_int64;
extern Type *ty_uint8;
extern Type *ty_uint16;
extern Type *ty_uint32;
extern Type *ty_uint64;
extern Type *ty_flt32;
extern Type *ty_flt64;

extern FILE *debugfh;

char *symname=NULL;
char *varname=NULL;
static Type *ty;
%}

# Statements
#
input_file = s:statement_block EOF
	{
	  if (debugfh != NULL) dumpAST(s, 0, 0);
	  genAST(s);
	}

## Statements: a statement block has all the declarations first,
#  followed by at least one procedural statement.
#
statement_block = LCURLY declaration_stmt* s:procedural_stmts RCURLY
	{ $$ = s; }

declaration_stmt = type SYMBOL { varname= strdup(symname); }
						ASSIGN e:expression SEMI
	{
	  ASTnode *d= declaration_statement(varname, e, ty);
	  // For now, generate the QBE code as we do a declaration.
	  // Later, we should attach the AST tree to the main AST tree.
	  if (d != NULL) {
	    if (debugfh != NULL) dumpAST(d, 0, 0);
	    genAST(d);
	  }
	}

procedural_stmts = l:procedural_stmt r:procedural_stmts
	{
	  // Glue left and right together if there are both
	  $$ = binop(l,r,A_GLUE);
	}
	| l:procedural_stmt
	{
	  // Otherwise just return left if there is no right
	  $$ = l;
	}

procedural_stmt = print_stmt
	| assign_stmt
	| if_stmt
	| while_stmt
	| for_stmt

print_stmt = PRINT e:expression SEMI
	{
	  $$ = print_statement(e);
	}

assign_stmt = for_assign_stmt SEMI

for_assign_stmt = v:variable ASSIGN e:expression
	{
	  $$ = assignment_statement(v, e);
	}

if_stmt = IF LPAREN e:relational_expression RPAREN t:statement_block
					    ELSE   f:statement_block
	{
	  $$= mkastnode(A_IF, NULL, false, e, t, f, NULL, 0);
	}
	| IF LPAREN e:relational_expression RPAREN t:statement_block
	{
	  $$= mkastnode(A_IF, NULL, false, e, t, NULL, NULL, 0);
	}

while_stmt = WHILE LPAREN e:relational_expression RPAREN s:statement_block
	{
	  $$= mkastnode(A_WHILE, NULL, false, e, s, NULL, NULL, 0);
	}

for_stmt = FOR LPAREN i:assign_stmt e:relational_expression SEMI
		send:for_assign_stmt RPAREN s:statement_block
	{
	  // Glue the end code after the statement block
	  s = binop(s,send,A_GLUE);
	  // We put the initial code at the end so that
	  // we can send the node to gen_WHILE() :-)
	  $$= mkastnode(A_FOR, NULL, false, e, s, i, NULL, 0);
	}

# Expressions
#
expression = bitwise_expression

bitwise_expression = 
	( INVERT l:relational_expression	{ l  = unarop(l, A_INVERT); }
	| l:relational_expression
	)
	( AND r:relational_expression		{ l  = binop(l,r,A_AND); }
	| OR  r:relational_expression		{ l  = binop(l,r,A_OR);  }
	| XOR r:relational_expression		{ l  = binop(l,r,A_XOR); }
	)* -					{ $$ = l; }

relational_expression =
	( NOT l:shift_expression		{ l  = unarop(l, A_NOT); }
	| l:shift_expression
	)
	( GE r:shift_expression			{ l  = binop(l,r,A_GE); }
	| GT r:shift_expression			{ l  = binop(l,r,A_GT); }
	| LE r:shift_expression			{ l  = binop(l,r,A_LE); }
	| LT r:shift_expression			{ l  = binop(l,r,A_LT); }
	| EQ r:shift_expression			{ l  = binop(l,r,A_EQ); }
	| NE r:shift_expression			{ l  = binop(l,r,A_NE); }
	)* -					{ $$ = l; }

shift_expression = l:additive_expression
	( LSHIFT r:additive_expression		{ l  = binop(l,r,A_LSHIFT); }
	| RSHIFT r:additive_expression		{ l  = binop(l,r,A_RSHIFT); }
	)* -					{ $$ = l; }

additive_expression =
	( PLUS? l:multiplicative_expression
        | MINUS l:multiplicative_expression	{ l  = unarop(l, A_NEGATE); }
	)
        ( PLUS  r:multiplicative_expression	{ l  = binop(l,r,A_ADD); }
        | MINUS r:multiplicative_expression	{ l  = binop(l,r,A_SUBTRACT); }
        )* -					{ $$ = l; }

multiplicative_expression = l:factor
	( STAR  r:factor 			{ l  = binop(l,r,A_MULTIPLY); }
	| SLASH r:factor 			{ l  = binop(l,r,A_DIVIDE); }
	)* -					{ $$ = l; }

factor =  f:FLTLIT 				{ $$ = f; }
	| f:INTLIT				{ $$ = f; }
	| TRUE					{ $$ = mkastleaf(A_NUMLIT,
						  ty_bool, true, NULL, 1); }
	| FALSE					{ $$ = mkastleaf(A_NUMLIT,
						  ty_bool, true, NULL, 0); }
	| v:variable				{ $$ = v; }

# Types
#
type =    "int8"   -			{ ty= ty_int8;   }
	| "int16"  -			{ ty= ty_int16;  }
	| "int32"  -			{ ty= ty_int32;  }
	| "int64"  -			{ ty= ty_int64;  }
	| "uint8"  -			{ ty= ty_uint8;  }
	| "uint16" -			{ ty= ty_uint16; }
	| "uint32" -			{ ty= ty_uint32; }
	| "uint64" -			{ ty= ty_uint64; }
	| "flt32"  -			{ ty= ty_flt32;  }
	| "flt64"  -			{ ty= ty_flt64;  }
	| "bool"   -			{ ty= ty_bool;   }
	| SYMBOL   -			{ fatal("unknown type %s\n", symname); }

# Variables, symbols, literals
#
variable = SYMBOL			{ $$ = mkident(symname); }

SYMBOL = < [A-Za-z_]+ [A-Za-z0-9_]* > -	{ symname= strdup(yytext); }

FLTLIT = < '-'? DIGIT+ '.' DIGIT+ > -
	{ Type *littype;
	  uint64_t val= parse_litval(yytext, &littype);
	  $$ = mkastleaf(A_NUMLIT, littype, true, NULL, val);
	}

INTLIT = < '-'? DIGIT+ > -
	{ Type *littype;
	  uint64_t val= parse_litval(yytext, &littype);
	  $$ = mkastleaf(A_NUMLIT, littype, true, NULL, val);
	}
DIGIT = [0-9]

# Operators
#
SLASH  = '/'  -
STAR   = '*'  -
MINUS  = '-'  -
PLUS   = '+'  -
ASSIGN = '='  -
GT     = '>'  -
GE     = '>=' -
LT     = '<'  -
LE     = '<=' -
EQ     = '==' -
NE     = '!=' -
INVERT = '~'  -
NOT    = '!'  -
AND    = '&'  -
OR     = '|'  -
XOR    = '^'  -
LSHIFT = '<<' -
RSHIFT = '>>' -

# Syntactic sugar
#
SEMI   = ';' -
LCURLY = '{' -
RCURLY = '}' -
LPAREN = '(' -
RPAREN = ')' -

# Keywords
#
PRINT  = "print" -
TRUE   = 'true'  -
FALSE  = 'false' -
IF     = 'if'    -
ELSE   = 'else'  -
WHILE  = 'while' -
FOR    = 'for'   -

# Whitespace and end of file
#
EOF = !.
CR  = ( '\n' | '\r' | '\r\n' )		{ Line++; }
-   = ( CR   | ' '  | '\t'   )*
